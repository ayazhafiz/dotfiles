{
  "list.previewSplitRight": true,
  "list.normalMappings": {
    "v": "action:vsplit"
  },
  "tsserver.log": "normal",
  "rust-analyzer.checkOnSave": true,
  "rust-analyzer.check.command": "clippy",
  "rust-analyzer.check.extraArgs": [
    "--target-dir",
    "/tmp/rust-analyzer-check"
  ],
  "rust-analyzer.cargo.features": "all",
  "rust-analyzer.debug.runtime": "vimspector",
  "rust-analyzer.procMacro.enable": true,
  "rust-analyzer.procMacro.attributes.enable": true,
  // TODO turn on after https://github.com/neovim/neovim/pull/9496
  "rust-analyzer.inlayHints.typeHints.enable": false,
  "rust-analyzer.inlayHints.chainingHints.enable": true,
  "rust-analyzer.inlayHints.reborrowHints.enable": "never",
  "rust-analyzer.inlayHints.closingBraceHints.enable": true,
  "rust-analyzer.inlayHints.closingBraceHints.minLines": 50,
  "coc.preferences.formatOnSave": true,
  // TODO turn on after https://github.com/neovim/neovim/pull/9496
  "inlayHint.enableParameter": false,
  "inlayHint.display": true,
  // "rust-analyzer.diagnostics.disabled": ["inactive-code"],
  // "inactive-coderust-analyzer.checkOnSave.overrideCommand": [
  //   "./x.py",
  //   "check",
  //   "--json-output"
  // ],
  // "rust-analyzer.rustfmt.overrideCommand": [
  //   "./build/x86_64-apple-darwin/stage0/bin/rustfmt",
  //   "--edition=2021"
  // ],
  "rust-analyzer.cargo.buildScripts.enable": false,
  // "rust-analyzer.rustc.source": "./Cargo.toml",
  "zig.enabled": true,
  "zig.startUpMessage": true,
  "zig.path": "zls",
  "zig.debugLog": false,
  //
  // Both of the following lines are required to use mypy for typechecking
  // https://github.com/fannheyward/coc-pyright/issues/848
  // "python.analysis.typeCheckingMode": "off",
  // "python.linting.mypyEnabled": true,
  "python.analysis.typeCheckingMode": "basic",
  "python.formatting.provider": "black",
  //
  "codeLens.enable": false,
  "diagnostic.refreshOnInsertMode": true,
  // "diagnostic.virtualText": true,
  "diagnostic.messageTarget": "float",
  "diagnostic.checkCurrentLine": false,
  "diagnostic.level": "information",
  "diagnostic-languageserver.enable": true,
  "diagnostic-languageserver.filetypes": {
    "sh": "shellcheck"
  },
  "suggest.noselect": false,
  "languageserver": {
    "ccls": {
      "command": "ccls",
      "filetypes": [],
      "rootPatterns": [
        ".ccls-root",
        "compile_commands.json"
      ],
      "initializationOptions": {
        "cache": {
          "directory": ".ccls-cache"
        },
        "clang": {
          "extraArgs": [
            "-isystem/Library/Developer/CommandLineTools/usr/include/c++/v1 -isysroot/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"
          ]
        }
      }
    },
    "clangd": {
      "command": "clangd",
      "args": [
        "--background-index"
      ],
      "rootPatterns": [
        "compile_flags.txt",
        "compile_commands.json",
        ".git/",
        ".hg/"
      ],
      "filetypes": [
        "c",
        "cpp",
        "objc",
        "objcpp"
      ]
    },
    "haskell": {
      "command": "haskell-language-server-wrapper",
      "args": [
        "--lsp"
      ],
      "rootPatterns": [
        "*.cabal",
        "stack.yaml",
        "cabal.project",
        "package.yaml",
        "hie.yaml"
      ],
      "filetypes": [
        "haskell",
        "lhaskell"
      ]
    },
    "slide": {
      "command": "/Users/hafiz/.cargo/bin/slide_ls",
      "rootPatterns": [
        "*"
      ],
      "filetypes": [
        "md",
        "markdown",
        "slide"
      ],
      "initializationOptions": {
        "document_parsers": {
          "md": "```math\\n((?:.|\\n)*?)\\n```",
          "slide": "(.*)"
        }
      }
    },
    "roc": {
      "command": "/Users/hafiz/Code/Roc/roc/crates/lang_srv/debug_server.sh",
      "filetypes": [
        "roc"
      ]
    },
    // "elmLS": {
    //   "command": "elm-language-server",
    //   "filetypes": ["elm"]
    // },
    "ocaml": {
      "command": "ocamllsp",
      "filetypes": [
        "ocaml"
      ]
    },
    "asm": {
      "command": "asm-lsp",
      "filetypes": [
        "nasm"
      ]
    },
    "nix": {
      "command": "rnix-lsp",
      "filetypes": [
        "nix"
      ]
    },
    "ruff": {
      "command": "uv",
      "args": [
        "run",
        "ruff",
        "server"
      ],
      "filetypes": [
        "python"
      ]
    },
    "terraform": {
      "command": "terraform-ls",
      "args": [
        "serve"
      ],
      "filetypes": [
        "terraform",
        "tf"
      ],
      "initializationOptions": {},
      "settings": {}
    }
  }
}
